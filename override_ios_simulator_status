#!/bin/bash

usage="\
This command runs \`xcrun simctl status_bar <device> override\` 
for each currently open iOS simulator. The arguments are the same
as they are for \`xcrun simctl status_bar <device> override\`; 
run \`xcrun simctl help status_bar\` for those arguments.

Usage:
override_ios_simulator_status <args>

Supply an argument of (-d|--default) to apply a time of 9:41 AM,
a battery level of 100%, and full wifi/cellular signal.
"

# Parse arguments
for i in "$@"; do
case $i in
    -h|--help)
    HELP=1
    ;;
    -d|--default)
    DEFAULT=1
    ;;
esac
done

# Display help option
if [[ $HELP -eq 1 ]]; then
	echo "$usage"
	exit
fi

# Display help if no arguments were supplied
if [[ $# -eq 0 ]]; then
	echo "$usage"
	exit
fi

uuidPattern="([0-9a-f]{8}-([0-9a-f]{4}-){3}[0-9a-f]{12})"

devices=`xcrun simctl list devices | grep "(Booted)"`

if test -z "$devices"; then
	echo "No simulators are open."
	exit
fi

echo $devices |
while IFS= read -r line; do
	trimmedLine=`echo $line | xargs`
	# Extract the UUID of the device from the line
	uuid=`echo $trimmedLine | grep -o -E -i "$uuidPattern"`

	# Apply only if a UUID was found
	if test -n $uuid; then
		if [[ $DEFAULT -eq 1 ]]; then
			echo "Applying default args to $trimmedLine"
			echo "--time 9:41 --batteryLevel 100 --cellularBars 4 --wifiBars 3"
			xcrun simctl status_bar $uuid override --time 9:41 --batteryLevel 100 --cellularBars 4 --wifiBars 3
		else
			echo "Applying args to $trimmedLine"
			xcrun simctl status_bar $uuid override $@
		fi
	fi
done
